import { NotificationObserver, NotificationSubject, Notification } from "../models/NotificaitonModel";
import { ReminderDuration, ReminderModel } from "../models/ReminderModel";
import { View } from "../view/View";
import HabitController from "./HabitController";

/**
 * We are using Observer design pattern and MVC pattern in this class.
 * 
 * ReminderController class implements NotificationSubject interface. Any class/object that wants to observe this subject should implement NotificationObserver interface.
 * In our case, our View class implements NotificationObserver as it wants to receive all notifications generated by ReminderController. 
 * 
 */
export class ReminderController implements NotificationSubject {
    private view: View;
    private model: ReminderModel;
    private observers: NotificationObserver[] = [];
    private notifications: Notification[] = [];

    /**
     * The ReminderController constructor will register the View as it implements NotificationObserver
     */
    constructor (){
        this.view = new View();
        this.model = new ReminderModel();

        this.registerObserver(this.view);
    }

    /**
     * This method creates a reminder for a habit. The reminder duration has been set to 2 minutes for now meaning that it will
     * remind the user to make progress on the Habit every 2 minutes.
     * @param habitId - habitId to which you want to add this reminder
     */
    public async createReminder(habitId: string): Promise<void> {
        const result = await this.model.createReminder(habitId, ReminderDuration.Every2Minutes);
        this.view.showConfirmationMessage(result);  
        this.triggerReminders();
    }

    /**
     * This method deletes a reminder for a habit
     * @param habitId - habitId for which user wants to delete a reminder
     * @param hideConfirmation - If true, it will hide the confirmation message for deleted reminder
     */
    public async removeReminder(habitId: string, hideConfirmation?: boolean): Promise<void> {
        const result = await this.model.deleteReminder(habitId);
        if(!hideConfirmation) this.view.showConfirmationMessage(result);  
    }

    /**
     * This method gets the latest data on reminders from database every 2 minutes and generates notification text for each reminder.
     */
    public async triggerReminders() : Promise<void>{
        // It fetches latest reminders from database. 
        // This will make sure if user creates/deletes a reminder the application will update its notifications accordingly.

        const result = await this.model.getAllReminders();
        const habitController = new HabitController();

        result.forEach(async r => {
            if(r.habitId){
                const habit = await habitController.getHabit(r.habitId);
                const currentTime = new Date();
                const notification : Notification = {
                    message:`(${currentTime.toLocaleString('en-US')}) : This is a reminder to make some progress for "${habit.name}". \n Your current progress count is ${habit.progress} since ${(habit.startDate)?.toLocaleDateString('en-US')}`
                }                
                this.addNotificaition(notification);
            }
        });
    }

    /**
     * This method adds the observer to list of observers that want to get notified every time there is an update.
     * @param observer - NotificationObserver object 
     */
    registerObserver(observer: NotificationObserver): void {
        this.observers.push(observer);
    }

    /**
     * This method removes the observer from list of observers
     * @param observer NotificationObserver object
     */
    removeObserver(observer: NotificationObserver): void {
        const index = this.observers.indexOf(observer);
        if (index !== -1) {
            this.observers.splice(index, 1);
        }
    }

    /**
     * This method adds the Notification to list of notifications and then calls notifyObservers(); 
     * @param notification - Notification object containing the message
     */
    addNotificaition(notification: Notification): void {
        this.notifications.push(notification);
        this.notifyObservers();
    }

    /**
     * This mehtod pulls out the latest notification and notifies all obeservers by calling updateNotificaitons() on the NotificationObserver objects.
     */
    notifyObservers(): void {
        const latestNotification = this.notifications[this.notifications.length - 1];
        this.observers.forEach(observer => observer.updateNotificaitons(latestNotification));
    }

}
